#!/bin/bash
{% if  include.comments is defined and include.comments %}
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
{% endif %}
{% if include.common_ubuntu is defined and include.common_ubuntu %}
{% if  include.comments is defined and include.comments %}
# If not running interactively, don't do anything
{% endif %}
case $- in
    *i*) ;;
    *) return;;
esac

{% if  include.comments is defined and include.comments %}

# make less more friendly for non-text input files, see lesspipe(1)
{% endif %}
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

{% if  include.comments is defined and include.comments %}
# set variable identifying the chroot you work in (used in the prompt below)
{% endif %}
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

{% if  include.comments is defined and include.comments %}
# set a fancy prompt (non-color, unless we know we "want" color)
{% endif %}
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

{% if  include.comments is defined and include.comments %}
# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes
{% endif %}
if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
{% if  include.comments is defined and include.comments %}
  # We have color support; assume it's compliant with Ecma-48
  # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
  # a case would tend to support setf rather than setaf.)
{% endif %}
  color_prompt=yes
    else
  color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

{% if  include.comments is defined and include.comments %}
# If this is an xterm set the title to user@host:dir
{% endif %}
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

{% endif %}

{% if include.common is defined and include.common %}
{% if  include.comments is defined and include.comments %}
############################################
############# COMMON OPTIONS ###############
############################################
{% endif %}
{% if  include.comments is defined and include.comments %}
# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
{% endif %}
export HISTCONTROL=ignoreboth:erasedups
{% if  include.comments is defined and include.comments %}
# append to the history file, don't overwrite it
{% endif %}
shopt -s histappend
{% if  include.comments is defined and include.comments %}
# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
{% endif %}
HISTSIZE=1000
HISTFILESIZE=20000
{% if  include.comments is defined and include.comments %}
# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
{% endif %}
shopt -s checkwinsize


PROMPT_COMMAND='history -a; history -c; history -r'
export EDITOR=nano
{% endif %}
{#****************************************************************************#}

{% if include.bindings is defined and include.bindings %}
{% if  include.comments is defined and include.comments %}
############################################
########## KEY BINDINGS SECTION ############
############################################
#поиск по истории стрелками вверх/вниз
  {% endif %}
if [ -t 1 ]
then
    # we have a tty
    bind '"\e[A": history-search-backward'
    bind '"\e[B": history-search-forward'
fi
{% if  include.comments is defined and include.comments %}
############################################
{% endif %}

{%endif%}
{#****************************************************************************#}

{% if include.color is defined and include.color %}
{% if  include.comments is defined and include.comments %}
############################################
############### COLORS SECTION #############
############################################
# enable color support of ls and also add handy aliases
{% endif %}
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

{% endif %}
{#****************************************************************************#}
{% if include.alias is defined %}
{% if  include.comments is defined and include.comments %}
############################################
############### ALIAS SECTION #############
############################################
# enable color support of ls and also add handy aliases
{% endif %}
{% if include.alias.common is defined and include.alias.common %}
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

{% endif %}
{% if include.alias.develop is defined and include.alias.develop %}
alias CD='cd ~/develop'
alias CDA='{{ ep.config.bash.alias.cda }}'
alias CDC='{{ ep.config.bash.alias.cdc }}'
alias CDD='{{ ep.config.bash.alias.cdd }}'
alias CDG='cd  ~/develop/git/github/'
alias CDT='cd  ~/develop/git/github/disfinder/tools/ansible'
alias CDM='{{ ep.config.bash.alias.cdm }}'
alias FIXPASTE='printf "\e[?2004l"'
alias FF_BANK='firefox --new-instance --profile ~/.mozilla/firefox/wpsazwpb.BANK/'

alias gs='git status'
alias gl='git ls'
alias gd='git diff'
alias gdt='git difftool'
alias=gprod='git pull --rebase origin devops'

{% include "bash_addon.j2" %}

if [ -a /usr/share/autojump/autojump.sh ]; then
  source /usr/share/autojump/autojump.sh
fi

{% if  include.comments is defined and include.comments %}
# Powerfull GRC tool for color everything!
{% endif %}
if [ -f /usr/bin/grc ]; then
  alias cvs="grc --colour=auto cvs"
  alias diff="grc --colour=auto diff"
  alias esperanto="grc --colour=auto esperanto"
  alias gcc="grc --colour=auto gcc"
  alias irclog="grc --colour=auto irclog"
  # alias log="grc --colour=auto log"
  alias netstat="grc --colour=auto netstat"
  alias ping="grc --colour=auto ping"
  alias traceroute="grc --colour=auto traceroute"
  alias wdiff="grc --colour=auto wdiff"
  alias diff="grc --colour=auto diff"
  alias configure="grc --colour=auto configure"
  alias make="grc --colour=auto make"
  alias last="grc --colour=auto last"
  alias mount="grc --colour=auto mount"
  alias mtr="grc --colour=auto mtr"
  alias ps="grc --colour=auto ps"
  alias dig="grc --colour=auto dig"
  # alias ls="grc --colour=auto ls"
fi

{% if  include.comments is defined and include.comments %}
# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
{% endif %}
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

{% if  include.comments is defined and include.comments %}
# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
{% endif %}
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

{% endif %}
{% endif %}
{#****************************************************************************#}


{% if include.completion is defined and include.completion %}
{% if  include.comments is defined and include.comments %}
############################################
############ COMPLETION SECTION ############
############################################
# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
{% endif %}
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

{% endif %}
{#****************************************************************************#}

{% if include.path is defined %}
{% if  include.comments is defined and include.comments %}
############################################
############### PATH SECTION ###############
############################################
{% endif %}
{% if include.path.develop is defined and include.path.develop%}
export PATH="${PATH}:/home/disfinder/opt/maestro-cli/bin/"
export JAVA_HOME=/usr/lib/jvm/java-8-oracle

{% endif %}
{% endif %}
{#****************************************************************************#}
{#
############################################
############### PS1 SECTION #############
############################################
#  \a         an ASCII bell character (07)
#  \d         the date in "Weekday Month Date" format (e.g., "Tue May 26")
#  \D{format} the format is passed to strftime(3) and the result
#             is inserted into the prompt string an empty format
#             results in a locale-specific time representation.
#             The braces are required
#  \e         an ASCII escape character (033)
#  \h         the hostname up to the first `.'
#  \H         the hostname
#  \j         the number of jobs currently managed by the shell
#  \l         the basename of the shell's terminal device name
#  \n         newline
#  \r         carriage return
#  \s         the name of the shell, the basename of $0 (the portion following
#             the final slash)
#  \t         the current time in 24-hour HH:MM:SS format
#  \T         the current time in 12-hour HH:MM:SS format
#  \@         the current time in 12-hour am/pm format
#  \A         the current time in 24-hour HH:MM format
#  \u         the username of the current user
#  \v         the version of bash (e.g., 2.00)
#  \V         the release of bash, version + patch level (e.g., 2.00.0)
#  \w         the current working directory, with $HOME abbreviated with a tilde
#  \W         the basename of the current working directory, with $HOME
#             abbreviated with a tilde
#  \!         the history number of this command
#  \#         the command number of this command
#  \$         if the effective UID is 0, a #, otherwise a $
#  \nnn       the character corresponding to the octal number nnn
#  \\         a backslash
#  \[         begin a sequence of non-printing characters, which could be used
#             to embed a terminal control sequence into the prompt
#  \]         end a sequence of non-printing characters
{% endif %}
txtblk='\e[0;30m' # Black - Regular
txtred='\e[0;31m' # Red
txtgrn='\e[0;32m' # Green
txtylw='\e[0;33m' # Yellow
txtblu='\e[0;34m' # Blue
txtpur='\e[0;35m' # Purple
txtcyn='\e[0;36m' # Cyan
txtwht='\e[0;37m' # White
bldblk='\e[1;30m' # Black - Bold
bldred='\e[1;31m' # Red
bldgrn='\e[1;32m' # Green
bldylw='\e[1;33m' # Yellow
bldblu='\e[1;34m' # Blue
bldpur='\e[1;35m' # Purple
bldcyn='\e[1;36m' # Cyan
bldwht='\e[1;37m' # White
unkblk='\e[4;30m' # Black - Underline
undred='\e[4;31m' # Red
undgrn='\e[4;32m' # Green
undylw='\e[4;33m' # Yellow
undblu='\e[4;34m' # Blue
undpur='\e[4;35m' # Purple
undcyn='\e[4;36m' # Cyan
undwht='\e[4;37m' # White
bakblk='\e[40m'   # Black - Background
bakred='\e[41m'   # Red
badgrn='\e[42m'   # Green
bakylw='\e[43m'   # Yellow
bakblu='\e[44m'   # Blue
bakpur='\e[45m'   # Purple
bakcyn='\e[46m'   # Cyan
bakwht='\e[47m'   # White
txtrst='\e[0m'    # Text Reset

#}

{% if include.ps1 is defined and include.ps1 %}
if [[ $UID == "0" ]];
then
{%if ps1.color_root is defined and ps1.color_root %}
    export PS1='\t \e[1;31m\u@\h\e[1;34m: \w\e[0m\n\$ '
{% endif %}
else
{% if ps1.gray_user is defined and ps1.gray_user %}
    export PS1='\u@\h\e[1;34m: \w\e[0m\$ '
{% endif %}
{% if ps1.color_user is defined and ps1.color_user %}
    export PS1='\e[1;32m\u@\h: \e[1;37m\W\e[0m \$ '
{% endif %}
{% if ps1.color_user_multiline is defined and ps1.color_user_multiline %}
    export PS1='\t \e[1;32m\u@\h\e[1;37m: \w\e[0m\n\$ '
{% endif %}
{%if ps1.developer is defined and ps1.developer %}
    export GIT_PS1_SHOWDIRTYSTATE=1
    export GIT_PS1_SHOWUNTRACKEDFILES=true
    export PS1='\[\033[01;33m\]\t \[\033[01;32m\]\u@\h\[\033[01;34m\] \w\[\033[01;33m\]$(__git_ps1)\[\033[01;34m\] \n\$\[\033[00m\] '
{% endif %}
fi
{% endif %}
